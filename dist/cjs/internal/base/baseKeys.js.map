{"version":3,"file":"baseKeys.js","names":["objectProto","Object","prototype","hasOwnProperty","nativeKeys","argument","keys","baseKeys","object","isPrototype","result","key","call","push"],"sources":["../../../../src/internal/base/baseKeys.ts"],"sourcesContent":["/** Used for built-in method references. */\nimport isPrototype from '../../is/isPrototype'\n\nconst objectProto = Object.prototype\n\n/** Used to check objects for own properties. */\nconst hasOwnProperty = objectProto.hasOwnProperty\n\nconst nativeKeys = (argument: any) => Object.keys(new Object(argument))\n\n/**\n * The base implementation of `keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {string[]} Returns the array of property names.\n */\nexport default function baseKeys(object: Object): string[] {\n  if (!isPrototype(object)) {\n    return nativeKeys(object)\n  }\n  const result = []\n  let key\n\n  for (key in new Object(object)) {\n    if (hasOwnProperty.call(object, key) && key !== 'constructor') {\n      result.push(key)\n    }\n  }\n  return result\n}\n"],"mappings":";;;;;;;AACA;;;;AADA;AAGA,IAAMA,WAAW,GAAGC,MAAM,CAACC,SAA3B;AAEA;;AACA,IAAMC,cAAc,GAAGH,WAAW,CAACG,cAAnC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD;EAAA,OAAmBJ,MAAM,CAACK,IAAP,CAAY,IAAIL,MAAJ,CAAWI,QAAX,CAAZ,CAAnB;AAAA,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASE,QAAT,CAAkBC,MAAlB,EAA4C;EACzD,IAAI,CAAC,IAAAC,oBAAA,EAAYD,MAAZ,CAAL,EAA0B;IACxB,OAAOJ,UAAU,CAACI,MAAD,CAAjB;EACD;;EACD,IAAME,MAAM,GAAG,EAAf;EACA,IAAIC,GAAJ;;EAEA,KAAKA,GAAL,IAAY,IAAIV,MAAJ,CAAWO,MAAX,CAAZ,EAAgC;IAC9B,IAAIL,cAAc,CAACS,IAAf,CAAoBJ,MAApB,EAA4BG,GAA5B,KAAoCA,GAAG,KAAK,aAAhD,EAA+D;MAC7DD,MAAM,CAACG,IAAP,CAAYF,GAAZ;IACD;EACF;;EACD,OAAOD,MAAP;AACD"}