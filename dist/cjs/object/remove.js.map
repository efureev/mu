{"version":3,"file":"remove.js","names":["remove","object","selector","divider","removeFromObject","from","keys","length","undefined","Array","isArray","isObject","slice","splice","stringToNumber","forEach","v","split"],"sources":["../../../src/object/remove.ts"],"sourcesContent":["import isObject from '../is/isObject'\nimport { stringToNumber } from '../to/toNumber'\n\n/**\n * Get value by deep key in object(array)\n *\n * @example\n * const obj = {\n        key  : 0,\n        label: 'Root',\n        items: {\n            one: {\n                key     : 1,\n                label   : 'One',\n                val     : 111,\n                items   : {\n                    two: {\n                        key  : 2,\n                        label: 'Two',\n                        val  : 111,\n                        items: {},\n                    },\n                },\n                children: [{\n                    key  : 2,\n                    label: 'Two',\n                    val  : 111,\n                    items: {},\n                }, {\n                    key  : 4,\n                    label: 'Four',\n                    val  : 444,\n                }],\n            },\n        },\n    }\n\n * remove(obj, 'items.one.children.1.key')\n * remove(obj, 'items.one')\n * remove(obj, 'label')\n * remove(obj, 'items/one/items/two/items','/')\n *\n * @param {object} object\n * @param {string|array} selector\n * @param {string} divider [divider='.']\n * @returns {object}\n */\nexport default function remove(\n  object: Record<PropertyKey, any>,\n  selector: string | string[],\n  divider: string = '.'\n): Record<PropertyKey, any> {\n  if (typeof selector === 'string') {\n    selector = [selector]\n  }\n\n  const removeFromObject = function (from: Record<PropertyKey, any>, keys: string[]): void {\n    if (keys.length > 1) {\n      if (from[keys[0]] !== undefined) {\n        if (Array.isArray(from[keys[0]]) || isObject(from[keys[0]])) {\n          removeFromObject(from[keys[0]], keys.slice(1))\n        }\n      }\n    } else {\n      if (Array.isArray(from)) {\n        from.splice(stringToNumber(keys[0]), 1)\n      } else if (isObject(from)) {\n        delete from[keys[0]]\n      }\n    }\n  }\n\n  if (Array.isArray(selector)) {\n    selector.forEach(v => {\n      removeFromObject(object, v.split(divider))\n    })\n  }\n\n  return object\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,MAAT,CACbC,MADa,EAEbC,QAFa,EAIa;EAAA,IAD1BC,OAC0B,uEADR,GACQ;;EAC1B,IAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;IAChCA,QAAQ,GAAG,CAACA,QAAD,CAAX;EACD;;EAED,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUC,IAAV,EAA0CC,IAA1C,EAAgE;IACvF,IAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;MACnB,IAAIF,IAAI,CAACC,IAAI,CAAC,CAAD,CAAL,CAAJ,KAAkBE,SAAtB,EAAiC;QAC/B,IAAIC,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACC,IAAI,CAAC,CAAD,CAAL,CAAlB,KAAgC,IAAAK,iBAAA,EAASN,IAAI,CAACC,IAAI,CAAC,CAAD,CAAL,CAAb,CAApC,EAA6D;UAC3DF,gBAAgB,CAACC,IAAI,CAACC,IAAI,CAAC,CAAD,CAAL,CAAL,EAAgBA,IAAI,CAACM,KAAL,CAAW,CAAX,CAAhB,CAAhB;QACD;MACF;IACF,CAND,MAMO;MACL,IAAIH,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;QACvBA,IAAI,CAACQ,MAAL,CAAY,IAAAC,wBAAA,EAAeR,IAAI,CAAC,CAAD,CAAnB,CAAZ,EAAqC,CAArC;MACD,CAFD,MAEO,IAAI,IAAAK,iBAAA,EAASN,IAAT,CAAJ,EAAoB;QACzB,OAAOA,IAAI,CAACC,IAAI,CAAC,CAAD,CAAL,CAAX;MACD;IACF;EACF,CAdD;;EAgBA,IAAIG,KAAK,CAACC,OAAN,CAAcR,QAAd,CAAJ,EAA6B;IAC3BA,QAAQ,CAACa,OAAT,CAAiB,UAAAC,CAAC,EAAI;MACpBZ,gBAAgB,CAACH,MAAD,EAASe,CAAC,CAACC,KAAF,CAAQd,OAAR,CAAT,CAAhB;IACD,CAFD;EAGD;;EAED,OAAOF,MAAP;AACD"}