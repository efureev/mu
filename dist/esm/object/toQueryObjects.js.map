{"version":3,"file":"toQueryObjects.js","names":["isObject","toQueryObjects","name","value","recursive","objects","i","ln","Array","isArray","valueArray","length","concat","push","valueObject","Object","prototype","hasOwnProperty","call"],"sources":["../../../src/object/toQueryObjects.ts"],"sourcesContent":["import isObject from './../is/isObject'\n\n/**\n * Converts a `name` - `value` pair to an array of objects with support for nested structures.\n * Useful to construct query strings. For example:\n *\n *     const objects = toQueryObjects('hobbies', ['reading', 'cooking', 'swimming']);\n *\n *     // objects then equals:\n *     [\n *         { name: 'hobbies', value: 'reading' },\n *         { name: 'hobbies', value: 'cooking' },\n *         { name: 'hobbies', value: 'swimming' },\n *     ];\n *\n *     const objects = toQueryObjects('dateOfBirth', {\n *         day: 3,\n *         month: 8,\n *         year: 1987,\n *         extra: {\n *             hour: 4,\n *             minute: 30,\n *         },\n *     }, true); // Recursive\n *\n *     // objects then equals:\n *     [\n *         { name: 'dateOfBirth[day]', value: 3 },\n *         { name: 'dateOfBirth[month]', value: 8 },\n *         { name: 'dateOfBirth[year]', value: 1987 },\n *         { name: 'dateOfBirth[extra][hour]', value: 4 },\n *         { name: 'dateOfBirth[extra][minute]', value: 30 },\n *     ];\n *\n * @param {String} name\n * @param {Object/Array} value\n * @param {Boolean} [recursive=false] True to traverse object recursively\n * @return {Object[]}\n * @todo write tests\n */\n\ntype oType = Record<string, any>\ntype oTypeArray = oType[]\n\nexport default function toQueryObjects(\n  name: string,\n  value: oType | oTypeArray,\n  recursive: boolean = false\n): Record<string, any>[] {\n  let objects: oTypeArray = []\n  let i, ln\n\n  if (Array.isArray(value)) {\n    const valueArray = value as oTypeArray\n    for (i = 0, ln = valueArray.length; i < ln; i++) {\n      if (recursive) {\n        objects = objects.concat(toQueryObjects(name + '[' + i + ']', valueArray[i], true))\n      } else {\n        objects.push({\n          name: name,\n          value: valueArray[i],\n        })\n      }\n    }\n    return objects\n  }\n\n  if (isObject(value)) {\n    const valueObject = value as oType\n    for (i in value) {\n      if (Object.prototype.hasOwnProperty.call(value, i)) {\n        if (recursive) {\n          objects = objects.concat(toQueryObjects(name + '[' + i + ']', valueObject[i], true))\n        } else {\n          objects.push({\n            name: name,\n            value: valueObject[i],\n          })\n        }\n      }\n    }\n    return objects\n  }\n\n  objects.push({\n    name: name,\n    value: value,\n  })\n\n  return objects\n}\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,kBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,eAAe,SAASC,cAAT,CACbC,IADa,EAEbC,KAFa,EAGbC,SAAkB,GAAG,KAHR,EAIU;EACvB,IAAIC,OAAmB,GAAG,EAA1B;EACA,IAAIC,CAAJ,EAAOC,EAAP;;EAEA,IAAIC,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAJ,EAA0B;IACxB,MAAMO,UAAU,GAAGP,KAAnB;;IACA,KAAKG,CAAC,GAAG,CAAJ,EAAOC,EAAE,GAAGG,UAAU,CAACC,MAA5B,EAAoCL,CAAC,GAAGC,EAAxC,EAA4CD,CAAC,EAA7C,EAAiD;MAC/C,IAAIF,SAAJ,EAAe;QACbC,OAAO,GAAGA,OAAO,CAACO,MAAR,CAAeX,cAAc,CAACC,IAAI,GAAG,GAAP,GAAaI,CAAb,GAAiB,GAAlB,EAAuBI,UAAU,CAACJ,CAAD,CAAjC,EAAsC,IAAtC,CAA7B,CAAV;MACD,CAFD,MAEO;QACLD,OAAO,CAACQ,IAAR,CAAa;UACXX,IAAI,EAAEA,IADK;UAEXC,KAAK,EAAEO,UAAU,CAACJ,CAAD;QAFN,CAAb;MAID;IACF;;IACD,OAAOD,OAAP;EACD;;EAED,IAAIL,QAAQ,CAACG,KAAD,CAAZ,EAAqB;IACnB,MAAMW,WAAW,GAAGX,KAApB;;IACA,KAAKG,CAAL,IAAUH,KAAV,EAAiB;MACf,IAAIY,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCf,KAArC,EAA4CG,CAA5C,CAAJ,EAAoD;QAClD,IAAIF,SAAJ,EAAe;UACbC,OAAO,GAAGA,OAAO,CAACO,MAAR,CAAeX,cAAc,CAACC,IAAI,GAAG,GAAP,GAAaI,CAAb,GAAiB,GAAlB,EAAuBQ,WAAW,CAACR,CAAD,CAAlC,EAAuC,IAAvC,CAA7B,CAAV;QACD,CAFD,MAEO;UACLD,OAAO,CAACQ,IAAR,CAAa;YACXX,IAAI,EAAEA,IADK;YAEXC,KAAK,EAAEW,WAAW,CAACR,CAAD;UAFP,CAAb;QAID;MACF;IACF;;IACD,OAAOD,OAAP;EACD;;EAEDA,OAAO,CAACQ,IAAR,CAAa;IACXX,IAAI,EAAEA,IADK;IAEXC,KAAK,EAAEA;EAFI,CAAb;EAKA,OAAOE,OAAP;AACD"}