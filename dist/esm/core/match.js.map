{"version":3,"file":"match.js","names":["match","expr","cases","strict","pattern","action","Array","isArray","Object","entries","prn","undefined","default"],"sources":["../../../src/core/match.ts"],"sourcesContent":["interface casesObjectType extends Record<PropertyKey, any> {\n  default?: any\n}\n\ntype casesType = casesObjectType | [() => PropertyKey, any][]\n\n/**\n * @param {*} expr\n * @param {object|array} cases\n * @param {boolean} strict Strict comparison (===) or (==). For example, it should be used for digit case-keys.\n * @return {*}\n */\nexport default function match(expr: any, cases: casesType, strict: boolean = true): any {\n  for (const [pattern, action] of Array.isArray(cases) ? cases : Object.entries(cases)) {\n    const prn = typeof pattern === 'function' ? pattern() : pattern\n\n    if (strict ? expr === prn : expr == prn) {\n      return typeof action === 'function' ? action() : action\n    }\n  }\n\n  return Array.isArray(cases) ? undefined : cases.default\n}\n"],"mappings":"AAMA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,KAAT,CAAeC,IAAf,EAA0BC,KAA1B,EAA4CC,MAAe,GAAG,IAA9D,EAAyE;EACtF,KAAK,MAAM,CAACC,OAAD,EAAUC,MAAV,CAAX,IAAgCC,KAAK,CAACC,OAAN,CAAcL,KAAd,IAAuBA,KAAvB,GAA+BM,MAAM,CAACC,OAAP,CAAeP,KAAf,CAA/D,EAAsF;IACpF,MAAMQ,GAAG,GAAG,OAAON,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,EAAvC,GAA4CA,OAAxD;;IAEA,IAAID,MAAM,GAAGF,IAAI,KAAKS,GAAZ,GAAkBT,IAAI,IAAIS,GAApC,EAAyC;MACvC,OAAO,OAAOL,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,EAArC,GAA0CA,MAAjD;IACD;EACF;;EAED,OAAOC,KAAK,CAACC,OAAN,CAAcL,KAAd,IAAuBS,SAAvB,GAAmCT,KAAK,CAACU,OAAhD;AACD"}