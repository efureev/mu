{"version":3,"file":"isFloat.js","names":["reIsFloat","isFloats","parameters","length","Error","some","parameter","Number","isNaN","parseFloat","isFloat","number","n","isFloatCanonical","test","String"],"sources":["../../../src/is/isFloat.ts"],"sourcesContent":["/**\n * This function evaluates whether all parameters are floats\n */\nimport { reIsFloat } from '../core/vars'\nimport { TextNumber } from '../internal/types'\n\nexport function isFloats(...parameters: any[]): boolean {\n  if (parameters.length === 0) throw new Error('Please provide at least one number to evaluate isFloat.')\n  if (parameters.some(parameter => Number.isNaN(Number.parseFloat(parameter))))\n    throw new Error('Please provide all numbers to evaluate isFloat.')\n\n  return !parameters.some(parameter => !isFloat(Number.parseFloat(parameter)))\n}\n\nexport default function isFloat(number: any): boolean {\n  const n = Number.parseFloat(number)\n  return Number(n) === n && n % 1 !== 0\n}\n\n/**\n * @example\n * TRUE:\n *  where `isFloat` === true && '2.0', '-2.0', -2.212, +2.212, '+2.212', '3.14'\n */\nexport function isFloatCanonical(number: TextNumber): boolean {\n  return reIsFloat.test(String(number))\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,cAA1B;AAGA,OAAO,SAASC,QAAT,CAAkB,GAAGC,UAArB,EAAiD;EACtD,IAAIA,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA6B,MAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;EAC7B,IAAIF,UAAU,CAACG,IAAX,CAAgBC,SAAS,IAAIC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACE,UAAP,CAAkBH,SAAlB,CAAb,CAA7B,CAAJ,EACE,MAAM,IAAIF,KAAJ,CAAU,iDAAV,CAAN;EAEF,OAAO,CAACF,UAAU,CAACG,IAAX,CAAgBC,SAAS,IAAI,CAACI,OAAO,CAACH,MAAM,CAACE,UAAP,CAAkBH,SAAlB,CAAD,CAArC,CAAR;AACD;AAED,eAAe,SAASI,OAAT,CAAiBC,MAAjB,EAAuC;EACpD,MAAMC,CAAC,GAAGL,MAAM,CAACE,UAAP,CAAkBE,MAAlB,CAAV;EACA,OAAOJ,MAAM,CAACK,CAAD,CAAN,KAAcA,CAAd,IAAmBA,CAAC,GAAG,CAAJ,KAAU,CAApC;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BF,MAA1B,EAAuD;EAC5D,OAAOX,SAAS,CAACc,IAAV,CAAeC,MAAM,CAACJ,MAAD,CAArB,CAAP;AACD"}